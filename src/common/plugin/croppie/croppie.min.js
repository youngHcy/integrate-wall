!function (t, e) {
    'function' == typeof define && define.amd ? define(['exports', 'b'], e) : 'object' == typeof exports && 'string' != typeof exports.nodeName ? e(exports, require('b')) : e(t.commonJsStrict = {}, t.b);
}(this, function (exports, t) {
    function e(t) {
        if (t in S) {
            return t;
        }

        for (var e = t[0].toUpperCase() + t.slice(1), n = R.length; n--;) {
            if (t = R[n] + e, t in S) {
                return t;
            }

        }
    }
    function n(t) {
        t = t || {};
        for (var e = 1; e < arguments.length; e++) {
            var i = arguments[e];
            if (i) {
                for (var o in i) {
                    i.hasOwnProperty(o) && ('object' == typeof i[o] ? t[o] = n({}, i[o]) : t[o] = i[o]);
                }
            }

        }
        return t;
    }
    function i(t, e, n) {
        var i;
        return function () {
            var o = this;
            var r = arguments;
            var a = function () {
                i = null, n || t.apply(o, r);
            };
            var s = n && !i;
            clearTimeout(i), i = setTimeout(a, e), s && t.apply(o, r);
        };
    }
    function o(t) {
        if ('createEvent' in document) {
            var e = document.createEvent('HTMLEvents');
            e.initEvent('change', !1, !0), t.dispatchEvent(e);
        }
        else {
            t.fireEvent('onchange');
        }
    }
    function r(t, e, n) {
        if ('string' == typeof e) {
            var i = e;
            e = {}, e[i] = n;
        }

        for (var o in e) {
            t.style[o] = e[o];
        }
    }
    function a(t) {
        var e = t.points;
        var n = document.createElement('div');
        var i = document.createElement('img');
        var o = e[2] - e[0];
        var a = e[3] - e[1];
        return n.classList.add('croppie-result'), n.appendChild(i), r(i, {left: -1 * e[0] + 'px', top: -1 * e[1] + 'px'}), i.src = t.imgSrc, r(n, {width: o + 'px', height: a + 'px'}), n;
    }
    function s(t, e) {
        var n = e.points;
        var i = n[0];
        var o = n[1];
        var r = n[2] - n[0];
        var a = n[3] - n[1];
        var s = e.circle;
        var c = document.createElement('canvas');
        var l = c.getContext('2d');
        return c.width = r, c.height = a, s && (l.save(), l.beginPath(), l.arc(r / 2, a / 2, r / 2, 0, 2 * Math.PI, !0), l.closePath(), l.clip()), l.drawImage(t, i, o, r, a, 0, 0, r, a), c.toDataURL();
    }
    function c(t) {
        var e;
        var n = new Image;
        return e = new Promise(function (e, i) {
            n.onload = function () {
                e(n);
            }, n.src = t;
        });
    }
    function l() {
        var t = this;
        var e = ['croppie-container'];
        var n = t.boundary = document.createElement('div');
        var i = t.viewport = document.createElement('div');
        var o = t.img = document.createElement('img');
        var a = t.overlay = document.createElement('div');
        var s = t.options.viewport.type ? 'cr-vp-' + t.options.viewport.type : null;
        n.classList.add('cr-boundary'), r(n, {width: t.options.boundary.width + 'px', height: t.options.boundary.height + 'px'}), i.classList.add('cr-viewport'), s && i.classList.add(s), r(i, {width: t.options.viewport.width + 'px', height: t.options.viewport.height + 'px'}), o.classList.add('cr-image'), a.classList.add('cr-overlay'), t.element.appendChild(n), n.appendChild(o), n.appendChild(i), n.appendChild(a), t.element.classList.add(e), t.options.customClass && t.element.classList.add(t.options.customClass), h.call(this), t.options.showZoom && p.call(t);
    }
    function p() {
        function t() {
            m.call(a), i = new Z(a.img), o = a.viewport.getBoundingClientRect(), r = B.parse(a.img);
        }
        function e() {
            u.call(a, {value: parseFloat(c.value), origin: i || new Z(a.img), viewportRect: o || a.viewport.getBoundingClientRect(), transform: r || B.parse(a.img)});
        }
        function n(n) {
            var i = n.deltaY / -2e3;
            var o = a._currentZoom + i;
            n.preventDefault(), t(), c.value = o, e();
        }
        var i;
        var o;
        var r;
        var a = this;
        var s = document.createElement('div');
        var c = a.zoomer = document.createElement('input');
        s.classList.add('cr-slider-wrap'), c.type = 'range', c.classList.add('cr-slider'), c.step = '0.01', c.value = 1, a.element.appendChild(s), s.appendChild(c), a._currentZoom = 1, a.zoomer.addEventListener('mousedown', t), a.zoomer.addEventListener('touchstart', t), a.zoomer.addEventListener('input', e), a.zoomer.addEventListener('change', e), a.options.mouseWheelZoom && (a.boundary.addEventListener('mousewheel', n), a.boundary.addEventListener('DOMMouseScroll', n));
    }
    function u(t) {
        var e = this;
        var n = t.transform;
        var i = t.viewportRect;
        var o = t.origin;
        e._currentZoom = t.value, n.scale = e._currentZoom;var a = d.call(e, i);
        var s = a.translate;
        var c = a.origin;
        n.x >= s.maxX && (o.x = c.minX, n.x = s.maxX), n.x <= s.minX && (o.x = c.maxX, n.x = s.minX), n.y >= s.maxY && (o.y = c.minY, n.y = s.maxY), n.y <= s.minY && (o.y = c.maxY, n.y = s.minY);var l = {};
        l[b] = n.toString(), l[L] = o.toString(), r(e.img, l), _.call(e), v.call(e);
    }
    function d(t) {
        var e = this;
        var n = e._currentZoom;
        var i = t.width;
        var o = t.height;
        var r = e.options.boundary.width / 2;
        var a = e.options.boundary.height / 2;
        var s = e._originalImageWidth;
        var c = e._originalImageHeight;
        var l = s * n;
        var p = c * n;
        var u = i / 2;
        var d = o / 2;
        var m = -1 * (u / n - r);
        var h = m - (l * (1 / n) - i * (1 / n));
        var g = -1 * (d / n - a);
        var v = g - (p * (1 / n) - o * (1 / n));
        var f = 1 / n * u;
        var w = l * (1 / n) - f;
        var y = 1 / n * d;
        var x = p * (1 / n) - y;
        return {translate: {maxX: m, minX: h, maxY: g, minY: v}, origin: {maxX: w, minX: f, maxY: x, minY: y}};
    }
    function m() {
        var t = this;
        var e = t._currentZoom;
        var n = t.img.getBoundingClientRect();
        var i = t.viewport.getBoundingClientRect();
        var o = B.parse(t.img.style[b]);
        var a = new Z(t.img);
        var s = i.top - n.top + i.height / 2;
        var c = i.left - n.left + i.width / 2;
        var l = {};
        var p = {};
        l.y = s / e, l.x = c / e, p.y = (l.y - a.y) * (1 - e), p.x = (l.x - a.x) * (1 - e), o.x -= p.x, o.y -= p.y;var u = {};
        u[L] = l.x + 'px ' + l.y + 'px', u[b] = o.toString(), r(t.img, u);
    }
    function h() {
        function t(t) {
            t.preventDefault(), p || (p = !0, i = t.pageX, a = t.pageY, transform = B.parse(l.img), window.addEventListener('mousemove', e), window.addEventListener('touchmove', e), window.addEventListener('mouseup', n), window.addEventListener('touchend', n), document.body.style[Y] = 'none', c = l.viewport.getBoundingClientRect());
        }
        function e(t) {
            t.preventDefault();var e = t.pageX || t.touches[0].pageX;
            var n = t.pageY || t.touches[0].pageY;
            var p = e - i;
            var u = n - a;
            var d = l.img.getBoundingClientRect();
            var m = transform.y + u;
            var h = transform.x + p;
            var v = {};
            if ('touchmove' == t.type && t.touches.length > 1) {
                var f = t.touches[0];
                var w = t.touches[1];
                var y = Math.sqrt((f.pageX - w.pageX) * (f.pageX - w.pageX) + (f.pageY - w.pageY) * (f.pageY - w.pageY));
                s || (s = y / l._currentZoom);
                var x = y / s;
                return l.zoomer.value = x, void o(l.zoomer);
            }

            c.top > d.top + u && c.bottom < d.bottom + u && (transform.y = m), c.left > d.left + p && c.right < d.right + p && (transform.x = h), v[b] = transform.toString(), r(l.img, v), g.call(l), a = n, i = e;
        }
        function n(t) {
            p = !1, window.removeEventListener('mousemove', e), window.removeEventListener('touchmove', e), window.removeEventListener('mouseup', n), window.removeEventListener('touchend', n), document.body.style[Y] = 'none', m.call(l), v.call(l), s = 0;
        }
        var i;
        var a;
        var s;
        var c;
        var l = this;
        var p = !1;
        l.overlay.addEventListener('mousedown', t), l.overlay.addEventListener('touchstart', t);
    }
    function g() {
        var t = this;
        var e = t.boundary.getBoundingClientRect();
        var n = t.img.getBoundingClientRect();
        r(t.overlay, {width: n.width + 'px', height: n.height + 'px', top: n.top - e.top + 'px', left: n.left - e.left + 'px'});
    }
    function v() {
        var t = this;
        t.options.update.call(t, t.get());
    }
    function f() {
        var t;
        var e;
        var n = this;
        var i = n.img.getBoundingClientRect();
        var r = n.viewport.getBoundingClientRect();
        var a = 0;
        var s = 1.5;
        var c = 1;
        n._originalImageWidth = i.width, n._originalImageHeight = i.height, n.options.showZoom && (t = r.width / i.width, e = r.height / i.height, a = Math.max(t, e), a > s && (s = a + 1, c = a + (s - a) / 2), n.zoomer.min = a, n.zoomer.max = s, n.zoomer.value = c, o(n.zoomer)), g.call(n);
    }
    function w(t) {
        if (4 != t.length) {
            throw 'Croppie - Invalid number of points supplied: ' + t;
        }

        var e = this;
        var n = t[2] - t[0];
        var i = e.viewport.getBoundingClientRect();
        var o = e.boundary.getBoundingClientRect();
        var a = {left: i.left - o.left, top: i.top - o.top};
        var s = i.width / n;
        var c = t[1];
        var l = t[0];
        var p = -1 * t[1] + a.top;
        var u = -1 * t[0] + a.left;
        var d = {};
        d[L] = l + 'px ' + c + 'px', d[b] = new B(u, p, s).toString(), r(e.img, d), e.zoomer.value = s, e._currentZoom = s;
    }
    function y(t, e) {
        var n;
        var i = this;
        var o = [];
        'string' == typeof t ? (n = t, t = {}) : (n = t.url, o = t.points || []), i.imgSrc = n;var r = c(n);
        return r.then(function () {
                i.img.src = n, f.call(i), o.length && w.call(i, o), v.call(i), e && e();
            }), r;
    }
    function x() {
        var t = this;
        var e = t.img.getBoundingClientRect();
        var n = t.viewport.getBoundingClientRect();
        var i = n.left - e.left;
        var o = n.top - e.top;
        var r = i + n.width;
        var a = o + n.height;
        var s = t._currentZoom;
        return i /= s, r /= s, o /= s, a /= s, {points: [i, o, r, a], zoom: s};
    }
    function E(t) {
        var e;
        var n = this;
        var i = x.call(n);
        return i.circle = 'circle' === n.options.viewport.type, i.imgSrc = n.imgSrc, t = t || 'html', e = new Promise(function (e, o) {
                'canvas' === t ? c(n.imgSrc).then(function (t) {
                    e(s(t, i));
                }) : e(a(i));
            });
    }
    function C(t, e) {
        this.element = t, this.options = n({}, C.defaults, e), l.call(this);
    }
    var L;
    var b;
    var Y;
    var R = ['Webkit', 'Moz', 'ms'];
    var S = document.createElement('div').style;
    b = e('transform'), L = e('transformOrigin'), Y = e('userSelect');
    var X = 'translate3d';
    var z = ', 0px';
    var B = function (t, e, n) {
        this.x = parseFloat(t), this.y = parseFloat(e), this.scale = parseFloat(n);
    };
    B.parse = function (t) {
        return t.style ? B.parse(t.style[b]) : t.indexOf('matrix') > -1 || t.indexOf('none') > -1 ? B.fromMatrix(t) : B.fromString(t);
    }, B.fromMatrix = function (t) {
        var e = t.substring(7).split(',');
        return e.length && 'none' !== t || (e = [1, 0, 0, 1, 0, 0]), new B(parseInt(e[4], 10), parseInt(e[5], 10), parseFloat(e[0]));
    }, B.fromString = function (t) {
        var e = t.split(') ');
        var n = e[0].substring(X.length + 1).split(',');
        var i = e.length > 1 ? e[1].substring(6) : 1;
        var o = n.length > 1 ? n[0] : 0;
        var r = n.length > 1 ? n[1] : 0;
        return new B(o, r, i);
    }, B.prototype.toString = function () {
        return X + '(' + this.x + 'px, ' + this.y + 'px' + z + ') scale(' + this.scale + ')';
    };
    var Z = function (t) {
        if (!t || !t.style[L]) {
            return this.x = 0, void (this.y = 0);
        }

        var e = t.style[L].split(' ');
        this.x = parseFloat(e[0]), this.y = parseFloat(e[1]);
    };
    Z.prototype.toString = function () {
        return this.x + 'px ' + this.y + 'px';
    };
    var _ = i(g, 500);
    if (this.jQuery) {
        var $ = this.jQuery;
        $.fn.croppie = function (t) {
            var e = typeof t;
            if ('string' === e) {
                var n = Array.prototype.slice.call(arguments, 1);
                var i = $(this).data('croppie');
                return 'get' === t ? i.get() : 'result' === t ? i.result.apply(i, n) : this.each(function () {
                    var e = $(this).data('croppie');
                    if (e) {
                        var i = e[t];
                        if (!$.isFunction(i)) {
                            throw 'Croppie ' + t + ' method not found';
                        }

                        i.apply(e, n);
                    }

                });
            }

            return this.each(function () {
                var e = new C(this, t);
                $(this).data('croppie', e);
            });
        };
    }

    C.defaults = {
        viewport: {width: 100, height: 100, type: 'square'},
        boundary: {width: 300, height: 300},
        customClass: '',
        showZoom: !0,
        mouseWheelZoom: !0,
        update: function () {}
    }, n(C.prototype, {
        bind: function (t, e) {
            return y.call(this, t, e);
        },
        get: function () {
            return x.call(this);
        },
        result: function (t) {
            return E.call(this, t);
        }
    }), exports.Croppie = window.Croppie = C;
});
